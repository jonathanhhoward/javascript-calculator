{"version":3,"sources":["utils/index.js","utils/calculate/index.js","reducers/expression.js","reducers/input.js","reducers/status.js","reducers/index.js","components/App/index.js","components/Display/index.js","handlers/handleDigit.js","handlers/handleOperator.js","components/KeyPad/index.js","handlers/handleClear.js","handlers/handleDelete.js","handlers/handleEquals.js","handlers/handleDecimal.js","serviceWorker.js","index.js"],"names":["STATUS","Object","freeze","EQUALS","INPUT","NEGATIVE","OPERATOR","RESULT","initialState","expression","input","status","KEY","CLEAR","DELETE","DIVIDE","MULTIPLY","SUBTRACT","ADD","DECIMAL","ZERO","ONE","TWO","THREE","FOUR","FIVE","SIX","SEVEN","EIGHT","NINE","getResult","state","result","number","Number","isNaN","NaN","toString","absNumber","Math","abs","round","precision10","toPrecision","toExponential","setPrecision10","expressionString","numberOrOperator","RegExp","tokenArray","match","left","term","token","shift","Error","primary","d","unshift","calculate","error","message","expressionReducer","action","type","payload","slice","length","inputReducer","statusReducer","reducer","App","useReducer","dispatch","useEffect","className","Display","KeyPad","id","handleDigit","symbol","replace","handleOperator","keys","class","click","_state","_symbol","includes","keyPad","map","key","onClick","Boolean","window","location","hostname","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0a705f0.chunk.js","sourcesContent":["import { calculate } from \"./calculate\";\n\nexport const STATUS = Object.freeze({\n  EQUALS: \"EQUALS\",\n  INPUT: \"INPUT\",\n  NEGATIVE: \"NEGATIVE\",\n  OPERATOR: \"OPERATOR\",\n  RESULT: \"RESULT\",\n});\n\nexport const initialState = {\n  expression: \"0\",\n  input: \"0\",\n  status: STATUS.INPUT,\n};\n\nexport const KEY = Object.freeze({\n  CLEAR: \"AC\",\n  DELETE: \"C\",\n  DIVIDE: \"/\",\n  MULTIPLY: \"*\",\n  SUBTRACT: \"-\",\n  ADD: \"+\",\n  EQUALS: \"=\",\n  DECIMAL: \".\",\n  ZERO: \"0\",\n  ONE: \"1\",\n  TWO: \"2\",\n  THREE: \"3\",\n  FOUR: \"4\",\n  FIVE: \"5\",\n  SIX: \"6\",\n  SEVEN: \"7\",\n  EIGHT: \"8\",\n  NINE: \"9\",\n});\n\n/**\n * @param {number} number\n * @returns {string}\n */\nfunction setPrecision10(number) {\n  if (Number.isNaN(number)) return NaN.toString();\n\n  if (number === 0) return \"0\";\n\n  const absNumber = Math.abs(number);\n\n  if (1e-6 <= absNumber && absNumber < 1) {\n    const round9 = Math.round(number * 1e9) / 1e9;\n    return round9.toString();\n  }\n\n  const precision10 = Number(number).toPrecision(10);\n\n  return absNumber < 1e-6 || 1e10 <= absNumber\n    ? Number(precision10).toExponential()\n    : Number(precision10).toString();\n}\n\n/**\n * @param {{expression: string, input: string, status: string}} state\n * @returns {{expression: string, input: string, status: string}}\n */\nexport function getResult(state) {\n  let result;\n\n  try {\n    result = setPrecision10(calculate(state.expression));\n  } catch (error) {\n    result = error.message;\n  }\n\n  return {\n    expression: state.expression,\n    input: result,\n    status: STATUS.RESULT,\n  };\n}\n","/**\n * @param {string} expressionString\n * @return {number}\n */\nexport function calculate(expressionString) {\n  const mantissa = \"\\\\d+(?:\\\\.\\\\d*)?\";\n  const exponent = \"e[-+]\\\\d+\";\n  const number = `${mantissa}(?:${exponent})?`;\n  const operator = \"[-+*/=]\";\n  const numberOrOperator = new RegExp(`${number}|${operator}`, \"g\");\n  const tokenArray = expressionString.match(numberOrOperator);\n\n  return expression();\n\n  /**\n   * The following code is taken from:\n   *\n   *     Stroustrup, Bjarne. \"Programming: Principles and Practice Using\n   *     C++.\" 2nd ed., Addison-Wesley Professional, 2014.\n   *\n   * It was translated into Javascript, modified to use an Array<Token>\n   * instead of a Token_stream, and removed unused features.\n   */\n\n  function expression() {\n    let left = term();\n    let token = tokenArray.shift();\n\n    while (true) {\n      switch (token) {\n        case \"+\":\n          left += term();\n          token = tokenArray.shift();\n          break;\n        case \"-\":\n          left -= term();\n          token = tokenArray.shift();\n          break;\n        case \"=\":\n          return left;\n        default:\n          throw new Error(\"expression error\");\n      }\n    }\n  }\n\n  function term() {\n    let left = primary();\n    let token = tokenArray.shift();\n\n    while (true) {\n      switch (token) {\n        case \"*\":\n          left *= primary();\n          token = tokenArray.shift();\n          break;\n        case \"/\":\n          const d = primary();\n          if (d === 0) throw new Error(\"divide by zero\");\n          left /= d;\n          token = tokenArray.shift();\n          break;\n        default:\n          tokenArray.unshift(token);\n          return left;\n      }\n    }\n  }\n\n  function primary() {\n    const token = tokenArray.shift();\n    if (token === \"-\") return -primary();\n\n    const result = Number(token);\n    if (Number.isNaN(result)) throw new Error(\"primary expected\");\n\n    return result;\n  }\n}\n","/**\n * @param {{ expression: string, input: string, status: string }} state\n * @param {{ type: string, payload: string }} action\n * @return {string}\n */\nexport function expressionReducer(state, action) {\n  const { expression, input } = state;\n\n  switch (action.type) {\n    case \"operator-operator-negate\":\n    case \"operator-input\":\n    case \"equals-input\":\n    case \"digit-negative\":\n    case \"digit-operator\":\n    case \"digit-input\":\n      return expression + action.payload;\n    case \"operator-negative\":\n    case \"equals-negative\":\n      return expression.slice(0, -2) + action.payload;\n    case \"operator-operator\":\n    case \"equals-operator\":\n    case \"digit-input-zero\":\n      return expression.slice(0, -1) + action.payload;\n    case \"delete\":\n      return expression.slice(0, -input.length) + action.payload;\n    case \"operator-result\":\n      return input + action.payload;\n    case \"digit-result\":\n      return action.payload;\n    default:\n      return expression;\n  }\n}\n","/**\n * @param {string} input\n * @param {{ type: string, payload: string }} action\n * @return {string}\n */\nexport function inputReducer(input, action) {\n  switch (action.type) {\n    case \"operator-result\":\n    case \"operator-negative\":\n    case \"operator-operator-negate\":\n    case \"operator-operator\":\n    case \"operator-input\":\n    case \"digit-result\":\n    case \"digit-operator\":\n    case \"digit-input-zero\":\n    case \"delete\":\n      return action.payload;\n    case \"digit-negative\":\n    case \"digit-input\":\n      return input + action.payload;\n    default:\n      return input;\n  }\n}\n","import { STATUS } from \"utils\";\n\n/**\n * @param {string} status\n * @param {{ type: string, payload: string }} action\n * @return {string}\n */\nexport function statusReducer(status, action) {\n  switch (action.type) {\n    case \"operator-result\":\n    case \"operator-negative\":\n    case \"operator-operator\":\n    case \"operator-input\":\n      return STATUS.OPERATOR;\n    case \"operator-operator-negate\":\n      return STATUS.NEGATIVE;\n    case \"equals-negative\":\n    case \"equals-operator\":\n    case \"equals-input\":\n      return STATUS.EQUALS;\n    case \"digit-result\":\n    case \"digit-negative\":\n    case \"digit-operator\":\n    case \"digit-input-zero\":\n    case \"digit-input\":\n      return STATUS.INPUT;\n    default:\n      return status;\n  }\n}\n","import { getResult, initialState } from \"utils\";\nimport { expressionReducer } from \"./expression\";\nimport { inputReducer } from \"./input\";\nimport { statusReducer } from \"./status\";\n\n/**\n * @param {{expression: string, input: string, status: string}} state\n * @param {{ type: string, payload: string }} action\n * @return {{expression: string, input: string, status: string}}\n */\nexport function reducer(state, action) {\n  switch (action.type) {\n    case \"clear\":\n      return initialState;\n    case \"get-result\":\n      return getResult(state);\n    default:\n      return {\n        expression: expressionReducer(state, action),\n        input: inputReducer(state.input, action),\n        status: statusReducer(state.status, action),\n      };\n  }\n}\n","import { useReducer, useEffect } from \"react\";\nimport { Display, KeyPad } from \"components\";\nimport { reducer } from \"reducers\";\nimport { initialState, STATUS } from \"utils\";\nimport \"./style.scss\";\n\nexport function App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    if (state.status !== STATUS.EQUALS) return;\n    dispatch({ type: \"get-result\" });\n  }, [state.status]);\n\n  return (\n    <div className=\"App\">\n      <Display expression={state.expression} input={state.input} />\n      <KeyPad state={state} dispatch={dispatch} />\n    </div>\n  );\n}\n","import \"./style.scss\";\n\nexport function Display({ expression, input }) {\n  return (\n    <div className=\"Display\">\n      <div className=\"Expression\">{expression}</div>\n      <div id=\"display\" className=\"Input\">\n        {input}\n      </div>\n    </div>\n  );\n}\n","import { STATUS } from \"utils\";\n\n/**\n * @param {{ expression: string, input: string, status: string }} state\n * @param {function({ type: string, payload: string }): void} dispatch\n * @param {string} symbol\n * @returns void\n */\nexport function handleDigit(state, dispatch, symbol) {\n  const isMaxDigits = state.input.replace(/[.-]/g, \"\").length === 10;\n\n  if (isMaxDigits && state.status !== STATUS.RESULT) return;\n\n  switch (state.status) {\n    case STATUS.RESULT:\n      return dispatch({ type: \"digit-result\", payload: symbol });\n    case STATUS.NEGATIVE:\n      return dispatch({ type: \"digit-negative\", payload: symbol });\n    case STATUS.OPERATOR:\n      return dispatch({ type: \"digit-operator\", payload: symbol });\n    case STATUS.INPUT:\n      return state.input === \"0\"\n        ? dispatch({ type: \"digit-input-zero\", payload: symbol })\n        : dispatch({ type: \"digit-input\", payload: symbol });\n    default:\n  }\n}\n","import { STATUS } from \"utils\";\n\n/**\n * @param {{ expression: string, input: string, status: string }} state\n * @param {function({ type: string, payload: string }): void} dispatch\n * @param {string} symbol\n * @returns void\n */\nexport function handleOperator(state, dispatch, symbol) {\n  switch (state.status) {\n    case STATUS.RESULT:\n      return dispatch({ type: \"operator-result\", payload: symbol });\n    case STATUS.NEGATIVE:\n      return dispatch({ type: \"operator-negative\", payload: symbol });\n    case STATUS.OPERATOR:\n      return symbol === \"-\"\n        ? dispatch({ type: \"operator-operator-negate\", payload: symbol })\n        : dispatch({ type: \"operator-operator\", payload: symbol });\n    case STATUS.INPUT:\n      return dispatch({ type: \"operator-input\", payload: symbol });\n    default:\n  }\n}\n","import {\n  handleClear,\n  handleDecimal,\n  handleDelete,\n  handleDigit,\n  handleEquals,\n  handleOperator,\n} from \"handlers\";\nimport { KEY } from \"utils\";\nimport \"./style.scss\";\n\n// prettier-ignore\nconst keys = [\n  { id: 'clear', class: 'clear', symbol: KEY.CLEAR, click: handleClear },\n  { id: 'delete', class: 'delete', symbol: KEY.DELETE, click: handleDelete },\n  { id: 'divide', class: 'operator', symbol: KEY.DIVIDE, click: handleOperator },\n  { id: 'multiply', class: 'operator', symbol: KEY.MULTIPLY, click: handleOperator },\n  { id: 'subtract', class: 'operator', symbol: KEY.SUBTRACT, click: handleOperator },\n  { id: 'add', class: 'operator', symbol: KEY.ADD, click: handleOperator },\n  { id: 'equals', class: 'equals', symbol: KEY.EQUALS, click: handleEquals },\n  { id: 'decimal', class: 'digit', symbol: KEY.DECIMAL, click: handleDecimal },\n  { id: 'zero', class: 'digit', symbol: KEY.ZERO, click: handleDigit },\n  { id: 'one', class: 'digit', symbol: KEY.ONE, click: handleDigit },\n  { id: 'two', class: 'digit', symbol: KEY.TWO, click: handleDigit },\n  { id: 'three', class: 'digit', symbol: KEY.THREE, click: handleDigit },\n  { id: 'four', class: 'digit', symbol: KEY.FOUR, click: handleDigit },\n  { id: 'five', class: 'digit', symbol: KEY.FIVE, click: handleDigit },\n  { id: 'six', class: 'digit', symbol: KEY.SIX, click: handleDigit },\n  { id: 'seven', class: 'digit', symbol: KEY.SEVEN, click: handleDigit },\n  { id: 'eight', class: 'digit', symbol: KEY.EIGHT, click: handleDigit },\n  { id: 'nine', class: 'digit', symbol: KEY.NINE, click: handleDigit },\n];\n\nexport function KeyPad({ state, dispatch }) {\n  const keyPad = keys.map((key) => (\n    <button\n      key={key.id}\n      className={`Key ${key.class}`}\n      id={key.id}\n      onClick={() => key.click(state, dispatch, key.symbol)}\n    >\n      {key.symbol}\n    </button>\n  ));\n\n  return <div className=\"KeyPad\">{keyPad}</div>;\n}\n","/**\n * @param {{ expression: string, input: string, status: string }} _state\n * @param {function({ type: string, payload: string }): void} dispatch\n * @param {string} symbol\n * @returns void\n */\nexport function handleClear(_state, dispatch, symbol) {\n  dispatch({ type: \"clear\", payload: symbol });\n}\n","import { STATUS } from \"utils\";\n\n/**\n * @param {{ expression: string, input: string, status: string }} state\n * @param {function({ type: string, payload: string }): void} dispatch\n * @param {string} _symbol\n * @returns void\n */\nexport function handleDelete(state, dispatch, _symbol) {\n  switch (state.status) {\n    case STATUS.INPUT:\n      return dispatch({ type: \"delete\", payload: \"0\" });\n    default:\n  }\n}\n","import { STATUS } from \"utils\";\n\n/**\n * @param {{ expression: string, input: string, status: string }} state\n * @param {function({ type: string, payload: string }): void} dispatch\n * @param {string} symbol\n * @returns void\n */\nexport function handleEquals(state, dispatch, symbol) {\n  switch (state.status) {\n    case STATUS.NEGATIVE:\n      return dispatch({ type: \"equals-negative\", payload: symbol });\n    case STATUS.OPERATOR:\n      return dispatch({ type: \"equals-operator\", payload: symbol });\n    case STATUS.INPUT:\n      return dispatch({ type: \"equals-input\", payload: symbol });\n    default:\n  }\n}\n","import { STATUS } from \"utils\";\nimport { handleDigit } from \"./handleDigit\";\n\n/**\n * @param {{ expression: string, input: string, status: string }} state\n * @param {function({ type: string, payload: string }): void} dispatch\n * @param {string} symbol\n * @returns void\n */\nexport function handleDecimal(state, dispatch, symbol) {\n  if (state.input.includes(symbol) && state.status !== STATUS.RESULT) return;\n\n  return state.input === \"0\" || state.status !== STATUS.INPUT\n    ? handleDigit(state, dispatch, \"0\" + symbol)\n    : handleDigit(state, dispatch, symbol);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { StrictMode } from \"react\";\nimport { render } from \"react-dom\";\nimport { App } from \"components\";\nimport * as serviceWorker from \"serviceWorker\";\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}